import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";
import { AppThunk, RootState } from "../../app/store";
import { fetchCount } from "./counterAPI";
import { loading, idle, failed, Status } from "../../app/types/status2";

export interface CounterState {
  counterValue: number;
  amountValue: number;
  status: Status;
}

const initialState: CounterState = {
  counterValue: 0,
  amountValue: 2,
  status: idle(),
};

// The function bellow is called a thunk and allows us to perform async logic.
// It can be dispatched like a regular action: 'dispatch(incrementAsync(10))'.
// This will call the thunk with the 'dispatch' function as the first arument.
// Async code can be executed and other actions can be dispatched.
// Thunks are typically used to make async requests.
export const incrementAsync = createAsyncThunk(
  "counter/fetchCount",
  async (amount: number) => {
    const response = await fetchCount(amount);
    // The value we return becomes the 'fulfilled' action payload
    return response.data;
  },
);

export const counterSlice = createSlice({
  name: "counter",
  initialState,
  // The 'reducers' field lets us define reducers and generate associated actions
  reducers: {
    increment: (state) => {
      state.counterValue += 1;
    },
    decrement: (state) => {
      state.counterValue -= 1;
    },
    incrementByAmount: (state, action: PayloadAction<number>) => {
      state.counterValue += action.payload;
    },
    setAmount: (state, action: PayloadAction<number>) => {
      state.amountValue = action.payload;
    },
  },
  // The extraReducers field lets he slice handle actions defined elsewhere,
  // including actions generated by createAsyncthunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(incrementAsync.pending, (state) => {
        state.status = loading();
      })
      .addCase(
        incrementAsync.fulfilled,
        (state, action: PayloadAction<number>) => {
          state.status = idle();
          state.counterValue += action.payload;
        },
      )
      .addCase(incrementAsync.rejected, (state) => {
        state.status = failed();
      });
  },
});

export const { increment, decrement, incrementByAmount, setAmount } =
  counterSlice.actions;

export const selectCount = (state: RootState) => state.counter.counterValue;
export const selectAmount = (state: RootState) => state.counter.amountValue;

export const incrementIfOdd =
  (amount: number): AppThunk =>
  (dispatch, getState) => {
    const currentValue = selectCount(getState());
    if (currentValue % 2 === 1) {
      dispatch(incrementByAmount(amount));
    }
  };
export default counterSlice.reducer;
